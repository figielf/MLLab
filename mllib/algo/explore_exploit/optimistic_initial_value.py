import numpy as np
from matplotlib import pyplot as plt


class BanditArm:
    def __init__(self, generator, initial_avg):
        self.generator = generator
        self.n_explorations = 0
        self.avg = initial_avg

    def pull(self):
        return self.generator()

    def update(self, x):
        self.n_explorations += 1
        self.avg = self.avg + (x - self.avg) / (self.n_explorations + 1)

    def pull_update(self):
        pulled = self.pull()
        self.update(pulled)
        return pulled


def bernoulli(p):
    return 1 if np.random.random() < p else 0


def epsilon_greedy_explore_exploit(bandits_factory, n_trials, initial_estimate=100, print_results=False):
    bandits = bandits_factory(initial_estimate)
    for bandit in bandits:
        bandit.avg = initial_estimate

    rewards = []
    bandit_avgs = np.zeros((n_trials, len(bandits)))
    for i in range(n_trials):
        # take best bandit
        bandit_id = np.argmax(np.array([b.avg for b in bandits if b.avg is not None]))
        bandit = bandits[bandit_id]
        rewards.append(bandit.pull_update())
        bandit_avgs[i, :] = np.array([b.avg for b in bandits])

    if print_results:
        print(f'overall win rate: {np.mean(rewards)}')
        for i, bandit in enumerate(bandits):
            print(f'bandit {i} explorations: {bandit.n_explorations}, final avg estimate: {bandit.avg}')

    return rewards, bandit_avgs


def plot_experiment_results(experiments_rewards, experiments_bandit_avgs, benchmark, plot_starting_point=0):
    plt.figure(figsize=(16, 16))
    for i in range(16):
        rewards = experiments_rewards[i]
        bandits_avgs = experiments_bandit_avgs[i]
        n = len(rewards)
        cumulative_rewards = np.cumsum(rewards)
        win_rates = cumulative_rewards / (np.arange(n) + 1)

        plt.subplot(4, 4, i + 1)
        plt.plot(win_rates[plot_starting_point:], label='overall win rate')
        for bi in range(bandits_avgs.shape[1]):
            plt.plot(bandits_avgs[plot_starting_point:, bi], label=f'bandit {bi}')
        plt.plot(np.ones(n)[plot_starting_point:] * benchmark)
        plt.title(f'experiment {i}')
        plt.legend()
    plt.show()


def bandits_generator(p0):
    bandits = []
    bandits.append(BanditArm(lambda: bernoulli(0.7), initial_avg=p0))
    bandits.append(BanditArm(lambda: bernoulli(0.6), initial_avg=p0))
    bandits.append(BanditArm(lambda: bernoulli(0.899), initial_avg=p0))
    bandits.append(BanditArm(lambda: bernoulli(0.9), initial_avg=p0))
    return bandits


if __name__ == '__main__':
    n_experiments = 16
    n_bandit_pulls = 100000
    initial_estimate = 5

    reward_avgs = []
    experiments_bandit_avgs = []

    for i in range(n_experiments):
        print(f'*** experiment {i} ***')
        rewards, bandit_avgs = epsilon_greedy_explore_exploit(
            bandits_factory=lambda p0: bandits_generator(p0),
            n_trials=n_bandit_pulls,
            initial_estimate=initial_estimate,
            print_results=True)
        reward_avgs.append(rewards)
        experiments_bandit_avgs.append(bandit_avgs)

    print(f'\n*** SUMMARY AFTER {n_experiments} ***')
    print(f'average overall experiment win rate: {np.mean(reward_avgs)}')

    plot_experiment_results(reward_avgs, experiments_bandit_avgs, 0.9, plot_starting_point=50)
